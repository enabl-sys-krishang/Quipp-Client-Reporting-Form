import React, { useState } from 'react';
import { Calendar, Send } from 'lucide-react';

export default function QuippForm() {
  // Replace this with your actual n8n webhook URL
  const WEBHOOK_URL = "https://n8n.srv1084877.hstgr.cloud/webhook-test/dad3a93a-6802-49c3-b13b-3c2862e684fd";
  
  const [formData, setFormData] = useState({
    brandName: '',
    ga4PropertyId: '',
    siteUrl: '',
    startDate: '',
    endDate: ''
  });
  
  const [submissions, setSubmissions] = useState([]);
  const [showSuccess, setShowSuccess] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const submission = {
      "Brand Name": formData.brandName,
      "GA4 Property ID": formData.ga4PropertyId,
      "Search Console Site URL": formData.siteUrl,
      "Start Date ": formData.startDate,
      "End Date": formData.endDate,
      "submittedAt": new Date().toISOString(),
      "formMode": "production"
    };
    
    try {
      // Store in persistent storage
      await window.storage.set(
        `submission:${Date.now()}`,
        JSON.stringify(submission),
        false
      );
      
      // Send to n8n webhook
      if (WEBHOOK_URL && WEBHOOK_URL !== "YOUR_N8N_WEBHOOK_URL_HERE") {
        const webhookResponse = await fetch(WEBHOOK_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(submission)
        });
        
        if (!webhookResponse.ok) {
          console.error('Webhook error:', await webhookResponse.text());
        } else {
          console.log('Successfully sent to n8n webhook');
        }
      }
      
      setSubmissions(prev => [submission, ...prev]);
      setShowSuccess(true);
      
      setFormData({
        brandName: '',
        ga4PropertyId: '',
        siteUrl: '',
        startDate: '',
        endDate: ''
      });
      
      setTimeout(() => setShowSuccess(false), 3000);
      
      console.log('Stored submission:', submission);
    } catch (error) {
      console.error('Storage error:', error);
      alert('Error saving form data. Please try again.');
    }
  };

  React.useEffect(() => {
    const loadSubmissions = async () => {
      try {
        const keys = await window.storage.list('submission:');
        if (keys && keys.keys) {
          const loadedSubmissions = [];
          for (const key of keys.keys) {
            try {
              const result = await window.storage.get(key);
              if (result && result.value) {
                loadedSubmissions.push(JSON.parse(result.value));
              }
            } catch (err) {
              console.log('Key not found:', key);
            }
          }
          setSubmissions(loadedSubmissions.sort((a, b) => 
            new Date(b.submittedAt) - new Date(a.submittedAt)
          ));
        }
      } catch (error) {
        console.log('No existing submissions found');
      }
    };
    loadSubmissions();
  }, []);

  return (
    <div className="min-h-screen bg-black py-12 px-4">
      <div className="max-w-2xl mx-auto">
        <div className="bg-black rounded-2xl shadow-xl overflow-hidden border border-gray-800">
          {/* Header with Logo */}
          <div className="p-8 text-center">
            <div className="flex justify-center">
              <div className="bg-gradient-to-br from-red-700 to-red-800 px-8 py-4 rounded-2xl">
                <h1 className="text-6xl font-light text-white tracking-wide">quipp</h1>
              </div>
            </div>
          </div>

          {/* Success Message */}
          {showSuccess && (
            <div className="mx-8 mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
              <p className="text-green-800 text-sm font-medium">
                âœ“ Form submitted successfully! Data has been stored and is ready for the n8n workflow.
              </p>
            </div>
          )}

          {/* Form */}
          <div className="p-8 space-y-6">
            {/* Brand Name */}
            <div>
              <label htmlFor="brandName" className="block text-sm font-medium text-gray-300 mb-2">
                Brand Name
              </label>
              <input
                type="text"
                id="brandName"
                name="brandName"
                value={formData.brandName}
                onChange={handleChange}
                className="w-full px-4 py-3 bg-gray-900 border border-gray-700 text-white rounded-lg focus:ring-2 focus:ring-red-700 focus:border-transparent outline-none transition-all"
                placeholder="Enter brand name"
              />
            </div>

            {/* GA4 Property ID */}
            <div>
              <label htmlFor="ga4PropertyId" className="block text-sm font-medium text-gray-300 mb-2">
                GA4 Property ID
              </label>
              <input
                type="number"
                id="ga4PropertyId"
                name="ga4PropertyId"
                value={formData.ga4PropertyId}
                onChange={handleChange}
                className="w-full px-4 py-3 bg-gray-900 border border-gray-700 text-white rounded-lg focus:ring-2 focus:ring-red-700 focus:border-transparent outline-none transition-all"
                placeholder="Enter GA4 property ID"
              />
            </div>

            {/* Site URL */}
            <div>
              <label htmlFor="siteUrl" className="block text-sm font-medium text-gray-300 mb-2">
                Site URL
              </label>
              <input
                type="url"
                id="siteUrl"
                name="siteUrl"
                value={formData.siteUrl}
                onChange={handleChange}
                className="w-full px-4 py-3 bg-gray-900 border border-gray-700 text-white rounded-lg focus:ring-2 focus:ring-red-700 focus:border-transparent outline-none transition-all"
                placeholder="https://example.com"
              />
            </div>

            {/* Date Range */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="startDate" className="block text-sm font-medium text-gray-300 mb-2">
                  <Calendar className="inline w-4 h-4 mr-1" />
                  Start Date
                </label>
                <input
                  type="date"
                  id="startDate"
                  name="startDate"
                  value={formData.startDate}
                  onChange={handleChange}
                  className="w-full px-4 py-3 bg-gray-900 border border-gray-700 text-white rounded-lg focus:ring-2 focus:ring-red-700 focus:border-transparent outline-none transition-all"
                />
              </div>

              <div>
                <label htmlFor="endDate" className="block text-sm font-medium text-gray-300 mb-2">
                  <Calendar className="inline w-4 h-4 mr-1" />
                  End Date
                </label>
                <input
                  type="date"
                  id="endDate"
                  name="endDate"
                  value={formData.endDate}
                  onChange={handleChange}
                  className="w-full px-4 py-3 bg-gray-900 border border-gray-700 text-white rounded-lg focus:ring-2 focus:ring-red-700 focus:border-transparent outline-none transition-all"
                />
              </div>
            </div>

            {/* Submit Button */}
            <button
              onClick={handleSubmit}
              className="w-full bg-gradient-to-r from-red-700 to-red-800 text-white py-3 px-6 rounded-lg font-medium hover:from-red-800 hover:to-red-900 focus:ring-4 focus:ring-red-300 transition-all shadow-lg flex items-center justify-center gap-2"
            >
              <Send className="w-5 h-5" />
              Submit Request
            </button>
          </div>
        </div>

        {/* Submissions Display */}
        {submissions.length > 0 && (
          <div className="mt-8 bg-black rounded-2xl shadow-xl p-8 border border-gray-800">
            <h2 className="text-xl font-semibold text-white mb-4">
              Recent Submissions
            </h2>
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {submissions.map((sub, idx) => (
                <div key={idx} className="p-4 bg-gray-900 rounded-lg border border-gray-800">
                  <div className="grid grid-cols-2 gap-2 text-sm">
                    <div>
                      <span className="font-medium text-gray-300">Brand:</span>
                      <span className="ml-2 text-gray-400">{sub["Brand Name"]}</span>
                    </div>
                    <div>
                      <span className="font-medium text-gray-300">GA4 ID:</span>
                      <span className="ml-2 text-gray-400">{sub["GA4 Property ID"]}</span>
                    </div>
                    <div className="col-span-2">
                      <span className="font-medium text-gray-300">URL:</span>
                      <span className="ml-2 text-gray-400 break-all">{sub["Search Console Site URL"]}</span>
                    </div>
                    <div>
                      <span className="font-medium text-gray-300">Period:</span>
                      <span className="ml-2 text-gray-400">{sub["Start Date "]} to {sub["End Date"]}</span>
                    </div>
                    <div>
                      <span className="font-medium text-gray-300">Submitted:</span>
                      <span className="ml-2 text-gray-400">
                        {new Date(sub.submittedAt).toLocaleString()}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
